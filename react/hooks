import { useState, useEffect, useMemo } from "react";

/**
 * ğŸ§ª Composant de dÃ©monstration pour useState, useEffect et useMemo
 */
export default function ExampleComponent() {
  // ğŸŸ¢ 1. useState â€” GÃ¨re lâ€™Ã©tat local
  const [inputValue, setInputValue] = useState<number>(0);
  const [data, setData] = useState<any>(null);

  // ğŸŸ¡ 2. useEffect â€” Effet secondaire (ex: appel API)
  useEffect(() => {
    async function fetchData() {
      // Exemple simulÃ© dâ€™appel API
      const result = await fetch("https://jsonplaceholder.typicode.com/posts/" + inputValue)
        .then((res) => res.json());

      setData(result);
    }

    fetchData();
  }, [inputValue]); // ğŸ‘ˆ Re-exÃ©cute si inputValue change

  // ğŸ”µ 3. useMemo â€” Optimisation dâ€™un calcul coÃ»teux
  const computedValue = useMemo(() => {
    console.log("Calcul en cours...");
    return inputValue * 1000; // Exemple de calcul
  }, [inputValue]);

  return (
    <div>
      <h3>Composant DÃ©mo React</h3>

      <input
        type="number"
        value={inputValue}
        onChange={(e) => setInputValue(parseInt(e.target.value))}
      />

      <p>Valeur calculÃ©e (useMemo) : {computedValue}</p>

      <h4>DonnÃ©es rÃ©cupÃ©rÃ©es (useEffect) :</h4>
      <pre>{JSON.stringify(data, null, 2)}</pre>
    </div>
  );
}
